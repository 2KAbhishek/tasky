{"version":3,"sources":["components/Button/Button.jsx","components/Header/Header.jsx","components/Task/Task.jsx","components/Tasks/Tasks.jsx","components/AddTask/AddTask.jsx","components/App/App.jsx","reportWebVitals.js","index.js"],"names":["Button","color","text","type","width","onClick","className","style","backgroundColor","defaultProps","Header","title","onAdd","showForm","Task","task","onDelete","onToggle","done","onDoubleClick","id","size","cursor","time","Tasks","tasks","map","AddTask","onSave","useState","setText","setTime","setDone","onSubmit","e","preventDefault","alert","htmlFor","name","placeholder","value","onChange","target","App","setShowForm","setTasks","length","date","Date","timeStr","toDateString","toLocaleTimeString","newTask","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.773639c3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './Button.css';\n\n/**\n * Button component\n * @param {*} {color, text, onClick}\n * @return {*}\n */\nconst Button = ({color, text, type, width, onClick}) => {\n  return (\n    <button className=\"Button\" style={{backgroundColor: color, width: width}}\n      onClick={onClick} type={type} > {text}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  text: 'Button',\n};\n\nButton.propTypes = {\n  color: PropTypes.string,\n  text: PropTypes.string,\n  type: PropTypes.string,\n  width: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport './Header.css';\nimport Button from '../Button/Button';\n\n/**\n * App header component\n * @param {*} {title}\n * @return {*}\n */\nconst Header = ({title, onAdd, showForm}) => {\n  return (\n    <header className=\"Header\">\n      <h1>{title}</h1>\n      <Button text={showForm ? 'Close' : 'Add'}\n        onClick={onAdd} color={showForm && 'red'} width={'5rem'}/>\n    </header>\n  );\n};\n\nHeader.defaultProps = {title: 'Tasky'};\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  onAdd: PropTypes.func,\n  showForm: PropTypes.bool,\n};\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport './Task.css';\n\nimport {FaCheck, FaTrash} from 'react-icons/fa';\n\nconst Task = ( {task, onDelete, onToggle} ) => {\n  return (\n    <div className={`Task ${task.done ? 'done' : ''}`}\n      onDoubleClick={() => onToggle(task.id)}>\n      <div className=\"row\">\n        <h3>{task.text}</h3>\n        <FaCheck onClick={() => onToggle(task.id)}\n          size={20} style = {{color: '#0DBC79', cursor: 'pointer'}}/>\n      </div>\n      <div className=\"row\">\n        <p>{task.time}</p>\n        <FaTrash onClick={() => onDelete(task.id)}\n          size= {20} style = {{color: '#EC231C', cursor: 'pointer'}}/>\n      </div>\n    </div>\n  );\n};\n\nTask.propTypes = {\n  task: PropTypes.object,\n  onDelete: PropTypes.func,\n  onToggle: PropTypes.func,\n};\n\nexport default Task;\n","import PropTypes from 'prop-types';\nimport Task from '../Task/Task';\n\nconst Tasks = ({tasks, onDelete, onToggle}) => {\n  return (\n    <>\n      {tasks.map((task) => (\n        <Task key={task.id} task={task}\n          onDelete={onDelete} onToggle={onToggle}/>\n      ))}\n    </>\n  );\n};\n\nTasks.propTypes = {\n  tasks: PropTypes.array,\n  onDelete: PropTypes.func,\n  onToggle: PropTypes.func,\n};\n\nexport default Tasks;\n","import {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './AddTask.css';\nimport Button from '../Button/Button';\n\nconst AddTask = ({onSave}) => {\n  const [text, setText] = useState('');\n  const [time, setTime] = useState('');\n  const [done, setDone] = useState(false);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (!text) {\n      alert('Please enter some text.');\n      return;\n    }\n\n    onSave({text, time, done});\n\n    setText('');\n    setTime('');\n    setDone(false);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className=\"form-input\">\n        <label htmlFor=\"Task\"></label>\n        <input type=\"text\" name=\"Task\" placeholder=\"Add Task\"\n          id=\"task\" value={text} onChange={(e) => setText(e.target.value)}/>\n      </div>\n      <div className=\"form-text\">\n        <label htmlFor=\"Date\"></label>\n        <input type=\"datetime-local\" name=\"Date\"\n          id=\"date\" value={time} onChange={(e) => setTime(e.target.value)} />\n      </div>\n      <Button text={'Save'} type={'submit'}\n        width= {'98%'}/>\n    </form>\n  );\n};\n\nAddTask.propTypes = {\n  onSave: PropTypes.func,\n};\n\nexport default AddTask;\n","import {useState} from 'react';\nimport './App.css';\nimport Header from '../Header/Header';\nimport Tasks from '../Tasks/Tasks';\nimport AddTask from '../AddTask/AddTask';\n\n/**\n * Main app component\n * @return {*}\n */\nconst App = () => {\n  const [showForm, setShowForm] = useState(false);\n  const [tasks, setTasks] = useState([\n    {\n      id: 1,\n      text: 'Build Projects',\n      time: 'Sun Jun 24 2021, 08:03:00 PM',\n      done: false,\n    },\n    {\n      id: 2,\n      text: 'Add to portfolio',\n      time: 'Wed Jun 16 2021, 10:03:00 AM',\n      done: true,\n    },\n  ]);\n\n  const saveTask = (task) => {\n    const id = tasks.length + 1;\n\n    // Added for datetime input to string, firefox doesn't support datetime\n    const date = new Date(task.time);\n    let timeStr = task.time;\n    if (date.toDateString() !== 'Invalid Date') {\n      timeStr = date.toDateString() + ', ' + date.toLocaleTimeString();\n    }\n    task.time = timeStr;\n\n    const newTask = {id, ...task};\n    setTasks([...tasks, newTask]);\n  };\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleDone = (id) => {\n    setTasks(tasks.map((task) => task.id === id ?\n     {...task, done: !task.done} : task));\n  };\n\n  return (\n    <div className=\"App\">\n      <Header title={'Tasky'} onAdd={() => setShowForm(!showForm)}\n        showForm={showForm}/>\n      {showForm && <AddTask onSave={saveTask}/>}\n      {tasks.length > 0 ?\n      (<Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleDone}/>) :\n      (<h3>No Tasks!</h3>)}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}